// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  reviews     Review[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  duration    String
  price       Float
  isFree      Boolean  @default(false)
  instructor  String
  level       String
  rating      Float    @default(0)
  students    Int      @default(0)
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  reviews     Review[]
  lessons     Lesson[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  duration    Int      // minutes
  isFree      Boolean  @default(false)
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  completed  Boolean  @default(false)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}
